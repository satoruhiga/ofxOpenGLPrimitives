#pragma once

struct GLSLType
{
	enum Enum {
		FLOAT = GL_FLOAT,
		FLOAT_VEC2 = GL_FLOAT_VEC2,
		FLOAT_VEC3 = GL_FLOAT_VEC3,
		FLOAT_VEC4 = GL_FLOAT_VEC4,
		INT = GL_INT,
		INT_VEC2 = GL_INT_VEC2,
		INT_VEC3 = GL_INT_VEC3,
		INT_VEC4 = GL_INT_VEC4,
		UNSIGNED_INT = GL_UNSIGNED_INT,
		UNSIGNED_INT_VEC2 = GL_UNSIGNED_INT_VEC2,
		UNSIGNED_INT_VEC3 = GL_UNSIGNED_INT_VEC3,
		UNSIGNED_INT_VEC4 = GL_UNSIGNED_INT_VEC4,
		BOOL = GL_BOOL,
		BOOL_VEC2 = GL_BOOL_VEC2,
		BOOL_VEC3 = GL_BOOL_VEC3,
		BOOL_VEC4 = GL_BOOL_VEC4,
		FLOAT_MAT2 = GL_FLOAT_MAT2,
		FLOAT_MAT3 = GL_FLOAT_MAT3,
		FLOAT_MAT4 = GL_FLOAT_MAT4,
		FLOAT_MAT2x3 = GL_FLOAT_MAT2x3,
		FLOAT_MAT2x4 = GL_FLOAT_MAT2x4,
		FLOAT_MAT3x2 = GL_FLOAT_MAT3x2,
		FLOAT_MAT3x4 = GL_FLOAT_MAT3x4,
		FLOAT_MAT4x2 = GL_FLOAT_MAT4x2,
		FLOAT_MAT4x3 = GL_FLOAT_MAT4x3,
		SAMPLER_1D = GL_SAMPLER_1D,
		SAMPLER_2D = GL_SAMPLER_2D,
		SAMPLER_3D = GL_SAMPLER_3D,
		SAMPLER_CUBE = GL_SAMPLER_CUBE,
		SAMPLER_1D_SHADOW = GL_SAMPLER_1D_SHADOW,
		SAMPLER_2D_SHADOW = GL_SAMPLER_2D_SHADOW,
		SAMPLER_1D_ARRAY = GL_SAMPLER_1D_ARRAY,
		SAMPLER_2D_ARRAY = GL_SAMPLER_2D_ARRAY,
		SAMPLER_1D_ARRAY_SHADOW = GL_SAMPLER_1D_ARRAY_SHADOW,
		SAMPLER_2D_ARRAY_SHADOW = GL_SAMPLER_2D_ARRAY_SHADOW,
		SAMPLER_2D_MULTISAMPLE = GL_SAMPLER_2D_MULTISAMPLE,
		SAMPLER_2D_MULTISAMPLE_ARRAY = GL_SAMPLER_2D_MULTISAMPLE_ARRAY,
		SAMPLER_CUBE_SHADOW = GL_SAMPLER_CUBE_SHADOW,
		SAMPLER_BUFFER = GL_SAMPLER_BUFFER,
		SAMPLER_2D_RECT = GL_SAMPLER_2D_RECT,
		SAMPLER_2D_RECT_SHADOW = GL_SAMPLER_2D_RECT_SHADOW,
		INT_SAMPLER_1D = GL_INT_SAMPLER_1D,
		INT_SAMPLER_2D = GL_INT_SAMPLER_2D,
		INT_SAMPLER_3D = GL_INT_SAMPLER_3D,
		INT_SAMPLER_CUBE = GL_INT_SAMPLER_CUBE,
		INT_SAMPLER_1D_ARRAY = GL_INT_SAMPLER_1D_ARRAY,
		INT_SAMPLER_2D_ARRAY = GL_INT_SAMPLER_2D_ARRAY,
		INT_SAMPLER_2D_MULTISAMPLE = GL_INT_SAMPLER_2D_MULTISAMPLE,
		INT_SAMPLER_2D_MULTISAMPLE_ARRAY = GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
		INT_SAMPLER_BUFFER = GL_INT_SAMPLER_BUFFER,
		INT_SAMPLER_2D_RECT = GL_INT_SAMPLER_2D_RECT,
		UNSIGNED_INT_SAMPLER_1D = GL_UNSIGNED_INT_SAMPLER_1D,
		UNSIGNED_INT_SAMPLER_2D = GL_UNSIGNED_INT_SAMPLER_2D,
		UNSIGNED_INT_SAMPLER_3D = GL_UNSIGNED_INT_SAMPLER_3D,
		UNSIGNED_INT_SAMPLER_CUBE = GL_UNSIGNED_INT_SAMPLER_CUBE,
		UNSIGNED_INT_SAMPLER_1D_ARRAY = GL_UNSIGNED_INT_SAMPLER_1D_ARRAY,
		UNSIGNED_INT_SAMPLER_2D_ARRAY = GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,
		UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,
		UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
		UNSIGNED_INT_SAMPLER_BUFFER = GL_UNSIGNED_INT_SAMPLER_BUFFER,
		UNSIGNED_INT_SAMPLER_2D_RECT = GL_UNSIGNED_INT_SAMPLER_2D_RECT
	};
	
	static string to_string(Enum type)
	{
		switch (type)
		{
			case FLOAT: return "GL_FLOAT";
			case FLOAT_VEC2: return "GL_FLOAT_VEC2";
			case FLOAT_VEC3: return "GL_FLOAT_VEC3";
			case FLOAT_VEC4: return "GL_FLOAT_VEC4";
			case INT: return "GL_INT";
			case INT_VEC2: return "GL_INT_VEC2";
			case INT_VEC3: return "GL_INT_VEC3";
			case INT_VEC4: return "GL_INT_VEC4";
			case UNSIGNED_INT: return "GL_UNSIGNED_INT";
			case UNSIGNED_INT_VEC2: return "GL_UNSIGNED_INT_VEC2";
			case UNSIGNED_INT_VEC3: return "GL_UNSIGNED_INT_VEC3";
			case UNSIGNED_INT_VEC4: return "GL_UNSIGNED_INT_VEC4";
			case BOOL: return "GL_BOOL";
			case BOOL_VEC2: return "GL_BOOL_VEC2";
			case BOOL_VEC3: return "GL_BOOL_VEC3";
			case BOOL_VEC4: return "GL_BOOL_VEC4";
			case FLOAT_MAT2: return "GL_FLOAT_MAT2";
			case FLOAT_MAT3: return "GL_FLOAT_MAT3";
			case FLOAT_MAT4: return "GL_FLOAT_MAT4";
			case FLOAT_MAT2x3: return "GL_FLOAT_MAT2x3";
			case FLOAT_MAT2x4: return "GL_FLOAT_MAT2x4";
			case FLOAT_MAT3x2: return "GL_FLOAT_MAT3x2";
			case FLOAT_MAT3x4: return "GL_FLOAT_MAT3x4";
			case FLOAT_MAT4x2: return "GL_FLOAT_MAT4x2";
			case FLOAT_MAT4x3: return "GL_FLOAT_MAT4x3";
			case SAMPLER_1D: return "GL_SAMPLER_1D";
			case SAMPLER_2D: return "GL_SAMPLER_2D";
			case SAMPLER_3D: return "GL_SAMPLER_3D";
			case SAMPLER_CUBE: return "GL_SAMPLER_CUBE";
			case SAMPLER_1D_SHADOW: return "GL_SAMPLER_1D_SHADOW";
			case SAMPLER_2D_SHADOW: return "GL_SAMPLER_2D_SHADOW";
			case SAMPLER_1D_ARRAY: return "GL_SAMPLER_1D_ARRAY";
			case SAMPLER_2D_ARRAY: return "GL_SAMPLER_2D_ARRAY";
			case SAMPLER_1D_ARRAY_SHADOW: return "GL_SAMPLER_1D_ARRAY_SHADOW";
			case SAMPLER_2D_ARRAY_SHADOW: return "GL_SAMPLER_2D_ARRAY_SHADOW";
			case SAMPLER_2D_MULTISAMPLE: return "GL_SAMPLER_2D_MULTISAMPLE";
			case SAMPLER_2D_MULTISAMPLE_ARRAY: return "GL_SAMPLER_2D_MULTISAMPLE_ARRAY";
			case SAMPLER_CUBE_SHADOW: return "GL_SAMPLER_CUBE_SHADOW";
			case SAMPLER_BUFFER: return "GL_SAMPLER_BUFFER";
			case SAMPLER_2D_RECT: return "GL_SAMPLER_2D_RECT";
			case SAMPLER_2D_RECT_SHADOW: return "GL_SAMPLER_2D_RECT_SHADOW";
			case INT_SAMPLER_1D: return "GL_INT_SAMPLER_1D";
			case INT_SAMPLER_2D: return "GL_INT_SAMPLER_2D";
			case INT_SAMPLER_3D: return "GL_INT_SAMPLER_3D";
			case INT_SAMPLER_CUBE: return "GL_INT_SAMPLER_CUBE";
			case INT_SAMPLER_1D_ARRAY: return "GL_INT_SAMPLER_1D_ARRAY";
			case INT_SAMPLER_2D_ARRAY: return "GL_INT_SAMPLER_2D_ARRAY";
			case INT_SAMPLER_2D_MULTISAMPLE: return "GL_INT_SAMPLER_2D_MULTISAMPLE";
			case INT_SAMPLER_2D_MULTISAMPLE_ARRAY: return "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY";
			case INT_SAMPLER_BUFFER: return "GL_INT_SAMPLER_BUFFER";
			case INT_SAMPLER_2D_RECT: return "GL_INT_SAMPLER_2D_RECT";
			case UNSIGNED_INT_SAMPLER_1D: return "GL_UNSIGNED_INT_SAMPLER_1D";
			case UNSIGNED_INT_SAMPLER_2D: return "GL_UNSIGNED_INT_SAMPLER_2D";
			case UNSIGNED_INT_SAMPLER_3D: return "GL_UNSIGNED_INT_SAMPLER_3D";
			case UNSIGNED_INT_SAMPLER_CUBE: return "GL_UNSIGNED_INT_SAMPLER_CUBE";
			case UNSIGNED_INT_SAMPLER_1D_ARRAY: return "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY";
			case UNSIGNED_INT_SAMPLER_2D_ARRAY: return "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY";
			case UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: return "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE";
			case UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: return "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY";
			case UNSIGNED_INT_SAMPLER_BUFFER: return "GL_UNSIGNED_INT_SAMPLER_BUFFER";
			case UNSIGNED_INT_SAMPLER_2D_RECT: return "GL_UNSIGNED_INT_SAMPLER_2D_RECT";
		}
	}
	
	template <typename T, int N>
	struct type_to_enum {};
};

#define DEFINE_GL_TYPE_TO_ENUM(TYPE, GL_TYPE) \
	template <> struct GLSLType::type_to_enum<TYPE, 1> { enum { value = GL_ ## GL_TYPE }; }; \
	template <> struct GLSLType::type_to_enum<TYPE, 2> { enum { value = GL_ ## GL_TYPE ## _VEC2 }; }; \
	template <> struct GLSLType::type_to_enum<TYPE, 3> { enum { value = GL_ ## GL_TYPE ## _VEC3 }; }; \
	template <> struct GLSLType::type_to_enum<TYPE, 4> { enum { value = GL_ ## GL_TYPE ## _VEC4 }; };

DEFINE_GL_TYPE_TO_ENUM(float, FLOAT);
DEFINE_GL_TYPE_TO_ENUM(int, INT);
DEFINE_GL_TYPE_TO_ENUM(unsigned int, UNSIGNED_INT);
DEFINE_GL_TYPE_TO_ENUM(bool, BOOL);

#undef DEFINE_GL_TYPE_TO_ENUM

